import { zodResolver } from '@hookform/resolvers/zod'
import React, { useEffect, useMemo, useState } from 'react'
import { useForm } from 'react-hook-form'
import { z } from 'zod'
import { fetchExchangeRate } from '../api/fetchExchangeRate'
import { useCurrencyStore } from '../store/useCurrencyStore'
import ConversationHistory from './ConversationHistory'
import CurrencySelector from './CurrencySelector'
import Loader from './Loader'
import MarqueeTicker from './MarqueeTicker'
import { Button } from './ui/button'

// üìå –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å Zod
const schema = z.object({
	amount: z
		.string()
		.nonempty('Amount is required')
		.refine(value => !isNaN(Number(value)) && Number(value) > 0, {
			message: 'Amount must be a positive number',
		}),
	fromCurrency: z.string().nonempty('Please select a currency'),
	toCurrency: z.string().nonempty('Please select a currency'),
})

type FormData = z.infer<typeof schema>

const CurrencyConverter: React.FC = () => {
	const {
		fromCurrency,
		toCurrency,
		setFromCurrency,
		setToCurrency,
		currencyList,
		loadCurrencies,
		isCrypto,
		setIsCrypto,
		addToHistory,
	} = useCurrencyStore()

	// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
	const [data, setData] = useState<null | {
		convertedAmount: string
		exchangeRate: number
	}>(null)
	const [isFetching, setIsFetching] = useState(false)
	const [error, setError] = useState<string | null>(null)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useForm —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ zod
	const {
		register,
		handleSubmit,
		setValue,
		formState: { errors },
		reset,
	} = useForm<FormData>({
		resolver: zodResolver(schema),
		defaultValues: {
			amount: '',
			fromCurrency: fromCurrency, // ‚úÖ —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ store
			toCurrency: toCurrency, // ‚úÖ —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ store
		},
	})

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–ª—é—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ (–§–∏–∞—Ç/–ö—Ä–∏–ø—Ç–æ)
	useEffect(() => {
		if (currencyList.length === 0) {
			loadCurrencies()
		}

		const newFromCurrency = isCrypto ? 'BTC' : 'USD'
		const newToCurrency = isCrypto ? 'ETH' : 'EUR'

		console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã: ${newFromCurrency} ‚Üí ${newToCurrency}`)

		setFromCurrency(newFromCurrency)
		setToCurrency(newToCurrency)

		// üí° –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ react-hook-form
		setValue('fromCurrency', newFromCurrency)
		setValue('toCurrency', newToCurrency)
	}, [
		isCrypto,
		currencyList,
		loadCurrencies,
		setFromCurrency,
		setToCurrency,
		setValue,
	])

	// ‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º fetchExchangeRate –Ω–∞–ø—Ä—è–º—É—é –≤ onSubmit
	const fetchRate = async (formData: FormData) => {
		try {
			setIsFetching(true)
			setError(null) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º

			const response = await fetchExchangeRate(
				formData.fromCurrency,
				formData.toCurrency,
				Number(formData.amount),
				isCrypto
			)

			setData(response) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

			// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			addToHistory({
				timestamp: new Date().toLocaleString(),
				from: formData.fromCurrency,
				to: formData.toCurrency,
				amount: formData.amount,
				exchangeRate: response.exchangeRate,
				convertedAmount: response.convertedAmount,
			})

			// –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Å—É–º–º—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
			reset({ amount: '' })
		} catch (err) {
			setError('Error fetching exchange rate.')
			console.error('‚ùå Fetch Error:', err)
		} finally {
			setIsFetching(false)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
	const onSubmit = async (formData: FormData) => {
		console.log('üîπ Sending request:', formData)
		await fetchRate(formData)
	}

	// ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª—é—Ç—ã (–§–∏–∞—Ç/–ö—Ä–∏–ø—Ç–æ)
	const filteredCurrencyList = useMemo(() => {
		return isCrypto
			? currencyList.filter(c => ['BTC', 'ETH', 'LTC'].includes(c)) // –§–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–∏–ø—Ç—É
			: currencyList.filter(c => !['BTC', 'ETH', 'LTC'].includes(c)) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–∞—Ç
	}, [isCrypto, currencyList])

	return (
		<div className='flex flex-col max-w-4xl w-full space-y-24'>
			<MarqueeTicker />

			<div className='max-w-sm w-full mx-auto p-6 bg-white text-black shadow-lg rounded-lg space-y-5'>
				<h2 className='text-xl font-bold text-center'>Currency Converter</h2>

				{/* –§–æ—Ä–º–∞ —Å react-hook-form */}
				<form className='space-y-4' onSubmit={handleSubmit(onSubmit)}>
					<div>
						<label className='block'>Amount:</label>
						<input
							type='text'
							{...register('amount')}
							className='w-full p-2 border rounded'
						/>
						{errors.amount && (
							<p className='text-red-500 text-sm mt-1'>
								{errors.amount.message}
							</p>
						)}
					</div>

					<div className='flex items-center gap-4'>
						<CurrencySelector
							label='From'
							value={fromCurrency}
							onChange={e => {
								setFromCurrency(e.target.value)
								setValue('fromCurrency', e.target.value)
							}}
							options={filteredCurrencyList}
						/>

						<button
							className='bg-gray-200 py-2 px-3 self-end rounded-full hover:bg-gray-300 transition'
							type='button'
							onClick={() => {
								const newFrom = toCurrency
								const newTo = fromCurrency

								console.log(`üîÑ –ú–µ–Ω—è–µ–º –≤–∞–ª—é—Ç—ã: ${newFrom} ‚Üí ${newTo}`)

								setFromCurrency(newFrom)
								setToCurrency(newTo)

								// üí° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å react-hook-form
								setValue('fromCurrency', newFrom)
								setValue('toCurrency', newTo)
							}}
						>
							üîÑ
						</button>

						<CurrencySelector
							label='To'
							value={toCurrency}
							onChange={e => {
								setToCurrency(e.target.value)
								setValue('toCurrency', e.target.value)
							}}
							options={filteredCurrencyList}
						/>
					</div>

					<div className='flex flex-col space-y-3'>
						<Button
							className='w-full'
							type='button'
							onClick={() => setIsCrypto(!isCrypto)}
						>
							{isCrypto ? 'Switch to Fiat' : 'Switch to Crypto'}
						</Button>

						<Button
							className='w-full bg-green-500 py-2 rounded hover:bg-green-600 transition'
							type='submit'
						>
							{isFetching ? 'Loading...' : 'Convert'}
						</Button>
					</div>
				</form>

				{/* üî¥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ */}
				{error && <p className='text-red-500 text-center mt-2'>{error}</p>}

				{/* üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Loader –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ */}
				{isFetching && <Loader />}

				{/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ */}
				{data && (
					<p className='text-center text-lg mt-4 font-bold'>
						Converted Amount: {data.convertedAmount} {toCurrency}
					</p>
				)}
			</div>

			{/* –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π */}
			<ConversationHistory />
		</div>
	)
}

export default CurrencyConverter
